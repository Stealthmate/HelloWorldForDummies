#ifndef POINT_H
#define POINT_H
/*
Това се нарича include-guard (заедно с директивата #endif на края на файла). Така се предотвратява многократно
include-ване на един и същи header файл.
*/


/*
Структурата Point описва една точка в триизмерно пространство, с координати х, у и z, над които могат да се извършват различни операции.
*/
struct Point
{
	float x, y ,z; // трите член-данни на структурата - координатите на точката
	
	Point(); // конструктор по подразбиране. Задава точка с координати (0, 0, 0)
	Point(float x, float y, float z); // Конструктор с параметри - задава точка с координати  (x, y, z)
	Point(const Point &p); // Конструктор за копиране - задава точка с координатите на точка p 

	Point operator=(const Point &p); // Оператор за присвояване. В случая същия като конструктура за копиране.

	Point operator+(const Point &p); // Връща точка, с координати сбора от координатите на дадената точка и точка p. 
	Point operator+(float x); // Връща точка, с координати сбора на координатите на дадената точка и числото х.
	Point operator-(const Point &p); // Аналогично на оператор+
	Point operator-(float x); // Аналогично на оператор+
	Point operator*(const Point &p); // Аналогично
	Point operator*(float x); // Аналогично
	Point operator/(const Point &p); // Аналогично
	Point operator/(float x); // Аналогично

	bool operator==(const Point &p); // Връща стойност ИСТИНА, ако всички  координати на дадената точка са равни на тези на точка p, и ЛЪЖА в противен случай.
	bool operator!=(const Point &p); // Връща ИСТИНА ако поне един координат на дадената точка е различен от съответния му в точка p.
	
	void print(); // Извежда на стандартния изход координатите на точката, форматирани в лесно-четлив вид.
};

#endif 
